<tool id="ARGO_beast_run" name="Run Beast" version="1.0.0">
  <description>Perform a discrete trait ancestral reconstruction analysis (al a Migrate) using BEAST</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <command interpreter="bash">
    beast.sh ${config}
  </command>
  <stdio>
    <expand macro="basic_errors"/>
  </stdio>
  <inputs>


    <!-- BASIC BEASTFILE SPECIFICATION -->
    <!-- ============================== -->
    <param name="alignment" type="data" format="fasta" label="Sequence alignment" optional="true"
      help="This is optional if you want to use the alignment in the BEAST file"/>

    <conditional name="metadata">
      <param name="specification" type="select" label="Metadata specification"
        help="BEAST needs to know how sequences should be split up into groups, and if samples have dates associated
        with them, how to get this data. You can either pass along a specification CSV file, or specify regular
        expressions for extrating this data from sequence names.">
        <option value="file" selected="true">Metadata file</option>
        <option value="regexp">From sequence names</option>
        <option value="in_beastfile">Use mappings in BEAST XML file</option>
      </param>
      <when value="file">
        <param name="file" type="data" format="csv" label="Metadata file"
          help="CSV file specifying deme and (optionally) date data."/>
        <param name="deme_column" type="text" label="Deme column" value="deme"
          help="Column in CSV file to treat as the deme specification"/>
        <param name="date_column" type="text" label="Deme column" value="" optional="true"
          help="Column in CSV file to treat as the date data. If left blank, all tips are set to time 0 by BEAST."/>
      </when>
      <!--XXX - Have to tune these regular expressions-->
      <when value="regexp">
        <param name="deme_regexp" type="text" value="[^\s\|]+|(.+)" label="Deme name regular expression"
          help="Defaults to second value in a 2-ple or triple of '|' separated values."/>
        <param name="date_regexp" type="text" value="[^\s\|]+\|[^\s\|]+\|(.+)" label="Date regular expression" optional="true"
          help="This regular expression should extract an integer value, which can be interpetted as a time value.
          Whether it is years, months, days (etc.) is up to you."/>
      </when>
      <when value="in_beastfile">
        <!--Nothing-->
      </when>
    </conditional>

    <param name="samples" type="integer" value="10000" label="Number of samples" min="100"
      help="Number of samples to keep out of chain."/>
    <!--XXX Will have to check to make sure logging frequency is the same between -resume runs-->
    <param name="sampling_interval" type="integer" value="1000" label="Sampling interval" min="1"
      help="Number of states explored in chain between samples. Note that if doing a resume run, this number must be
      the same as that of the prior run."/>
    <param name="random_seed" type="integer" value="" label="Random seed" optional="true"
      help="Random seed to be used in BEAST MCMC. Specifying and recording this value can aid in reproducibility."/>


    <!-- MANUAL BEASTFILE SPECIFICATION -->
    <!-- ============================== -->
    <param name="beastfile_template" type="data" format="xml" label="BEAST file XML template" optional="true"
      help="If all sequence, deme, and temporal data is present in this file, only the chain length settings above need
      be specified. Any sequence, deme or temporal data specified above will be taken in preference to whatever is in
      this file. Any customization of models or priors should be specified through this file. See below for details."/>


    <!-- HERE THERE BE DOWNSAMPLING OPTIONS -->
    <!-- ================================== -->
    <conditional name="downsampling">
      <param name="method" type="select" display="radio" label="Downsampling method"
        help="Downsampling let's set a maximum number of sequences per deme. This can help you
        investigate issues of sampling bias and sampling depth. Random downsampling is recommended for
        concerns relating to sampling depth, while K-means is recommended for addressing sampling bias.
        Please see the help below for a more detailed information.">
        <option value="none" selected="true">None</option>
        <option value="random">Random</option>
        <option value="kmeans">K-means</option>
      </param>
      <when value="none">
        <!--Do nothing-->
      </when>
      <when value="random">
        <param name="k" type="integer" value="" label="N sequences" min="2"
          help="Number of sequences to be taken per deme."/>
        <param name="random_seed" type="integer" value="" label="Random seed"
          help="Random seed to be used for sequence selections."/>
      </when>
      <when value="kmeans">
        <param name="k" type="integer" value="" label="N sequences" min="2"
          help="Number of sequences to be taken per deme."/>
        <param name="random_seed" type="integer" value="" label="Random seed"
          help="Random seed to be used for sequence selections."/>
      </when>
    </conditional>


    <!-- RESUME RUN OPTIONS -->
    <!-- ================== -->
    <conditional name="resume">
      <param name="selector" type="select" display="radio" label="Resume from a previous run?"
        help="If you have already run BEAST, and found that it did not run long enough (the mixing was poor), you can add the outputs
        from your last run and resume your run from where you left off.
        Note that this probably isn't worth doing if the first run did not take very long">
        <option value="false" selected="true">No thanks</option>
        <option value="true">Yes please</option>
      </param>
      <when value="false">
        <!--Do nothing-->
      </when>
      <when value="true">
        <param name="logfile" type="data" format="txt" label="Logfile from last run"/>
        <param name="treefile" type="data" format="txt" label="Treefile from last run"/>
        <param name="samples" type="integer" value="10000" label="Number of samples to keep" min="2"
          help="When doing a resume run, the total number of samples selected can grow quite large.
          This can lead to analysis tools like PACT and Tracer getting bogged down.
          To address this, after performing a resume run, we trim the output data to this number of samples to make things more manageable.
          However, for this to work, the sampling interval must be the same on all resume runs.
          This means that if you do a resume run based on another resume run, you have to use the 'full output' log/tree files of this tool here."/>
      </when>
    </conditional>

  </inputs>

  <outputs>
    <data name="logfile" format="tabular" label="Argo BEAST logfile"/>
    <data name="treefile" format="nex" label="Argo BEAST treefile"/>
  </outputs>

  <configfiles>
    <!-- XXX Not sure if these deme specifications will actually work or not ??? -->
    <configfile name="config">

ALIGNMENT="${alignment}"

METADATA_SPECIFICATION="${metadata.specification}"
#if $metadata.specification == "file"
METADATA_FILE="${metadata.file}"
#else
DEME_REGEX="${metadata.deme_regex}"
DATE_REGEX="${metadata.date_regex}"
#end if

SAMPLES_FLAG="-s ${samples}"
SAMPLING_INTERVAL_FLAG="-i ${sampling_interval}"
RANDOM_SEED="${random_seed}"

BEASTFILE_TEMPLATE="${beastfile_template}"

RESUME="${resume.selector}"
RESUME_LOGFILE="${resume.logfile}"
RESUME_TREEFILE="${resume.treefile}"
RESUME_SAMPLES="${resume.samples}"

DOWNSAMPLING_METHOD="${downsampling.method}"
#if $downsampling.method != "none"
DOWNSAMPLING_K="${downsampling.k}"
DOWNSAMPLING_RANDOM_SEED="${downsampling.random_seed}"
#end if


LOGFILE="${logfile}"
TREEFILE="${treefile}"

    </configfile>
  </configfiles>

  <!-- The contents of the help tag is parsed as reStructuredText. Please see
       help-template.rst for examples of commonly-used sections in other Galaxy
       tools. -->
  <help>

.. class:: infomark

What it does
------------

This runs BEAST for an Argo Navis analysis.
The inline help should clarify what is required for this tool.


Output files
------------

This tool outputs two files representing the posterior of distribution of evolutionary histories and ancestral trait states.

**Argo BEAST logfile**: A standard BEAST logfile of sampled states and parameters, suitable for being run through tracer.

**Argo BEAST treefile**: A nexus file of trees from the posterior, with ancestral states labeled. This is suitable for
being run through PACT.

Note that if you run BEAST a number of time in ``-resume`` mode (see above), these output files may become large enough
to significantly slow down Tracer and PACT.
If this becomes a problem, you can use the Posterior Subset Tool to reduce the size of these files.

Do note that it's important that you check your logfile for good mixing and convergence using a tool like `Tracer`_, or
your analyses will basically mean nothing.


Fine tuning
-----------

If you'd like to customize more fine tuned settings of the BEAST MCMC (models, priors, etc), you can do so by specifying
a custom BEAST file template.
The default template closely follows the setup in the `Ancestral State Reconstruction tutorial`_ by Remco Bouckaert,
which you can use as a guide for setting up your own custom BEAST analysis.
You can also download the default template XXX here and make modications from that.
However you should keep in mind that if you use BEAUti to make your customizations, you'll need to follow some of the
early steps in Remco's tutorial in order to get BEAST Classic set up with BEAUti.
Frome there, you can download the default template, and load it by firing up BEAUti and going to "File > Load".
Also, note that for additional assistance working with and tuning BEAST, the `BEAST homepage`_ is a great resource.

Some notes to keep in mind if you specify your own BEAST template from scratch:

* If you choose to specify the deme/community information directly in the your BEAST file and not apply the CSV or regular
  expression data to set this, you must name your discrete trait `deme`, even if it's not deme, but something else, like
  species name or tissue type.
* Note that the chain length and sampling interval settings in your beastfile will get overriden by whatever is specified
  here in this tool, and can not be assumed to remain as specified in your beastfile.
* If you don't have tip dates, you can speed up your run by specifying a custom beast file where your fixed clock's rate isn't
  estimated but left constant. If you don't have any temporal data, these estimates won't mean anything anyway.
* Main logfile must output to ``posterior.log`` and the trait trees to ``posterior.trait.trees``.

.. _Tracer: http://tree.bio.ed.ac.uk/software/tracer/
.. _Ancestral State Reconstruction tutorial: http://beast-classic.googlecode.com/files/ARv2.0.1.pdf
.. _BEAST homepage: http://beast-classic.googlecode.com/files/ARv2.0.1.pdf


Citation
--------

Should cite the upcoming AstV paper and BEAST and Trevor's flu paper


  </help>
</tool>
