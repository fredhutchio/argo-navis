<tool id="ARGO_beast_run" name="Run Beast" version="1.0.0">
  <description>Perform a discrete trait ancestral reconstruction analysis (al a Migrate) using BEAST</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <command interpreter="bash">
    beast.sh ${config}
  </command>
  <stdio>
    <expand macro="basic_errors"/>
  </stdio>
  <inputs>


    <!-- BASIC DATA SPECIFICATION -->
    <!-- ======================== -->
    <conditional name="alignment">
      <param name="specification" type="select" label="Alignment specification"
        help="You can either specify your own alignment data, or use the alignment data in the BEAST config file below.">
        <option value="file" selected="true">Alignment file</option>
        <option value="in_beastfile">Use alignment in BEAST config file</option>
      </param>
      <when value="file">
        <param name="file" type="data" format="fasta" label="Sequence alignment"
          help="This is optional if you want to use the alignment in the BEAST file."/>
      </when>
      <when value="in_beastfile"/>
    </conditional>

    <conditional name="metadata">
      <param name="specification" type="select" label="Metadata specification"
        help="BEAST needs to know how sequences split into demes, and whether there is date information.
        You can either specify a CSV metadata file, or regular expressions for extrating this data from sequence names.">
        <option value="file" selected="true">Metadata file</option>
        <option value="regex">From sequence names</option>
        <option value="in_beastfile">Use mappings in BEAST config file</option>
      </param>
      <when value="file">
        <param name="file" type="data" format="csv" label="Metadata file"
          help="CSV file specifying deme and (optionally) date data."/>
        <param name="deme_column" type="text" label="Deme column" value="deme"
          help="Column in CSV file to treat as the deme specification"/>
        <param name="date_column" type="text" label="Date column" value="" optional="true"
          help="Column in CSV file to treat as the date data. If left blank, all tips are set to time 0 by BEAST."/>
      </when>
      <!--XXX - Have to tune these regular expressions-->
      <when value="regex">
        <param name="deme_regex" type="text" value="^[^\s\|]+\|([^\|\s]+)" label="Deme name regular expression"
          help="Defaults to second value in a 2-ple or triple of '|' separated values.
          For help working with regular expressions, see rubular.com.
          Use (...) to capture the part of the match you want to extract as the deme name.">
          <sanitizer>
            <valid initial="string.printable">
             <remove value="&apos;"/>
            </valid>
            <mapping initial="none">
              <add source="&apos;" target="__sq__"/>
            </mapping>
          </sanitizer>
        </param>
        <param name="date_regex" type="text" value="^[^\s\|]+\|(?:[^\|\s]+)\|([\d]+\.?[\d]*)"
          label="Date regular expression" optional="true"
          help="This regular expression should extract an integer value, which can be interpetted as a time value.
          Whether it is years, months, days (etc.) is up to you.">
          <sanitizer>
            <valid initial="string.printable">
             <remove value="&apos;"/>
            </valid>
            <mapping initial="none">
              <add source="&apos;" target="__sq__"/>
            </mapping>
          </sanitizer>
        </param>
      </when>
      <when value="in_beastfile">
        <!--Nothing-->
      </when>
    </conditional>

    <param name="samples" type="integer" value="10000" label="Number of samples"
      help="Number of samples to take."/>
    <!--XXX Will have to check to make sure logging frequency is the same between -resume runs-->
    <param name="sampling_interval" type="integer" value="1000" label="Sampling interval"
      help="Number of states explored in chain between samples."/>
    <param name="random_seed" type="integer" value="" label="Random seed" optional="true"
      help="Random seed to be used in BEAST MCMC. Specifying and recording this value can aid in reproducibility."/>


    <!-- MANUAL BEASTFILE SPECIFICATION -->
    <!-- ============================== -->
    <conditional name="beastfile">
      <param name="specification" type="select" label="BEAST file specification"
        help="If you'd like to run a more custom analysis, you can specify your own BEAST file (see detailed help below).
        Additionally, if you are performing a resume run, you will need to specify the BEAST file output by the previous run.">
        <option value="default" selected="true">Default</option>
        <option value="custom">Custom or resume</option>
      </param>
      <when value="default"/>
      <when value="custom">
        <param name="template" type="data" format="xml" label="BEAST file XML template"
          help="Note that any alignment or deme/date data specified above will override whatever is present in this file.
          However, having this data specified in a custom file means you can forgo the inputs above."/>
      </when>
    </conditional>


    <!-- HERE THERE BE DOWNSAMPLING OPTIONS -->
    <!-- ================================== -->
    <conditional name="downsampling">
      <param name="method" type="select" display="radio" label="Downsampling method"
        help="Downsampling sets a maximum number of sequences per deme.
        This can help you investigate issues of sampling bias and sampling depth.
        Random downsampling is recommended for concerns relating to sampling depth, while K-means is recommended for
        addressing sampling bias.
        Please see the help below for a more detailed information.">
        <option value="none" selected="true">None</option>
        <option value="random">Random</option>
        <option value="kmeans">K-means</option>
      </param>
      <when value="none">
        <!--Do nothing-->
      </when>
      <when value="random">
        <param name="k" type="integer" value="" label="N sequences"
          help="Number of sequences to be taken per deme."/>
        <param name="random_seed" type="integer" value="" label="Random seed" optional="true"
          help="Random seed to be used for sequence selections."/>
      </when>
      <when value="kmeans">
        <param name="k" type="integer" value="" label="N sequences"
          help="Number of sequences to be taken per deme."/>
        <param name="random_seed" type="integer" value="" label="Random seed" optional="true"
          help="Random seed to be used for sequence selections."/>
      </when>
    </conditional>


    <!-- RESUME RUN OPTIONS -->
    <!-- ================== -->
    <conditional name="resume">
      <param name="selector" type="select" display="radio" label="Resume from a previous run?"
        help="If you ran BEAST but found it didn't run long enough, you can resume your run from where you left off.
        Note you will need to specify some of the previous run's outputs here and in the 'BEAST file specification' above,
        and the only other parameters that will have any effect on the run will be the number of samples.
        Note also this probably isn't worth doing if the previous run didn't take very long.">
        <option value="false" selected="true">No thanks</option>
        <option value="true">Yes please</option>
      </param>
      <when value="false">
        <!--Do nothing-->
      </when>
      <when value="true">
        <param name="logfile" type="data" format="txt" label="Logfile from last run"
          help="Cannot be the 'trimmed' output from previous run, but must be the full output."/>
        <param name="treefile" type="data" format="txt" label="Treefile from last run"
          help="As with the Logfile, cannot be the `trimmed` output."/>
        <param name="statefile" type="data" format="txt" label="State file from previous run."/>
        <param name="samples" type="integer" value="10000" label="Number of samples to keep"
          help="With resume runs, the log and tree files can grow quite large, bogging down PACT and other analysis tools.
          Therefore, after a resume run, 'trimmed' output files are created with this number of samples."/>
      </when>
    </conditional>

  </inputs>

  <outputs>
    <data name="logfile" format="tabular" label="BEAST logfile"/>
    <data name="treefile" format="nex" label="BEAST treefile"/>
    <data name="statefile" format="text" label="BEAST state file"/>
    <data name="ess" format="html" label="BEAST effective sample size stats"/>

    <data name="formatted_beastfile" format="xml" label="BEAST config file">
      <filter>resume['selector'] != "true"</filter>
    </data>
    <data name="downsampled_alignment" format="fasta" label="Downsampled alignment">
      <filter>downsampling['method'] != "none"</filter>
    </data>
    <data name="downsampled_metadata" format="csv" label="Downsampled metadata">
      <filter>downsampling['method'] != "none" and metadata['specification'] == "file"</filter>
    </data>
    <data name="trimmed_logfile" format="tabular" label="Trimmed BEAST logfile">
      <filter>resume['selector'] == "true"</filter>
    </data>
    <data name="trimmed_treefile" format="nex" label="Trimmed BEAST treefile">
      <filter>resume['selector'] == "true"</filter>
    </data>
  </outputs>

  <configfiles>
    <!-- XXX Not sure if these deme specifications will actually work or not ??? -->
    <configfile name="config">

## Specification of alignment
#if $alignment.specification == "file"
ALIGNMENT="${alignment.file}"
#else
ALIGNMENT=""
#end if


METADATA_SPECIFICATION="${metadata.specification}"
#if $metadata.specification == "file"
METADATA_FILE="${metadata.file}"
DEME_COLUMN="${metadata.deme_column}"
#if str($metadata.date_column) not in ["None", ""]
DATE_COLUMN="${metadata.date_column}"
#else
DATE_COLUMN=""
#end if
#elif $metadata.specification == "regex"
DEME_REGEX='${metadata.deme_regex}'
#if str($metadata.date_regex) != 'None'
DATE_REGEX='${metadata.date_regex}'
#else
DATE_REGEX=''
#end if
#else
METADATA_FILE=""
DEME_REGEX=""
DEME_COLUMN=""
DATE_COLUMN=""
DATE_REGEX=""
#end if

SAMPLES_FLAG="-s ${samples}"
SAMPLING_INTERVAL_FLAG="-i ${sampling_interval}"
#if str($random_seed) not in ["None", ""]
RANDOM_SEED_FLAG="-seed ${random_seed}"
#else
RANDOM_SEED_FLAG=""
#end if

BEASTFILE_SPECIFICATION="${beastfile.specification}"
#if $beastfile.specification == "custom"
BEASTFILE_TEMPLATE="${beastfile.template}"
#end if

RESUME_SELECTOR="${resume.selector}"
#if $resume.selector == "true"
RESUME_LOGFILE="${resume.logfile}"
RESUME_TREEFILE="${resume.treefile}"
RESUME_STATEFILE="${resume.statefile}"
RESUME_SAMPLES="${resume.samples}"
#end if

DOWNSAMPLING_METHOD="${downsampling.method}"
#if $downsampling.method != "none"
DOWNSAMPLING_K="${downsampling.k}"
#if str($downsampling.random_seed) != "None"
DOWNSAMPLING_RANDOM_SEED="${downsampling.random_seed}"
#end if
#end if



LOGFILE="${logfile}"
TREEFILE="${treefile}"
ESS="${ess}"

#if $resume.selector != "true"
FORMATTED_BEASTFILE="${formatted_beastfile}"
#else
FORMATTED_BEASTFILE="formatted_beastfile.xml"
#end if
STATEFILE="${statefile}"

#if $downsampling.method != "none"
DOWNSAMPLED_ALIGNMENT="${downsampled_alignment}"
#if $metadata.specification == "file"
DOWNSAMPLED_METADATA="${downsampled_metadata}"
#end if
#end if

#if $resume.selector == "true"
TRIMMED_LOGFILE="${trimmed_logfile}"
TRIMMED_TREEFILE="${trimmed_treefile}"
#end if

    </configfile>
  </configfiles>

  <!-- The contents of the help tag is parsed as reStructuredText. Please see
       help-template.rst for examples of commonly-used sections in other Galaxy
       tools. -->
  <help>

.. class:: infomark


About this tool
---------------

This tool is your starting point for running an Argo Navis analysis.
It runs BEAST for you, and produces output files which you can use in the associated PACT tool for producing data
visualizations and further analyses of your data.
It has a number of features which make it easier to investigate aspects of your data, and automate the setup of the BEAST
files and such.


Input files
-----------

To run this tool, you'll need some sequence data, and a way to specify which sequences belong to which demes.
The recommended way of doing this is to specify a FASTA sequence file of sequences, and a separate metadata CSV file with
additionl information.
Beyond deme specifications, this metadata file may also specify date information for your sequences.

An alternative which is still under development XXX, is to have deme and optionally date information encoded into the
sequence names.
You will be able to specify regular expressions in order to extract this information.

The last option is specification of this information directly through a BEAST XML config file.
You can download Beauti [link], install the BEAST Classic module XXX, and then load the template file available here:

XXX

Once you have that loaded into BEAUti, you can replace the sequence data in there with your own.
Once you've made changes to your config file, you can select "Custom or resume" from "Beast file specification", and specify
the new BEAST file you've created and uploaded into Galaxy.
However, you will also have to specify under "Sequence Alignment XXX" and "Metadata specification" that you wish to use the
data in this file.
If you don't do this, whatever files/options are specified for Sequence alignment and Metadata specification will replace the
data specified in your BEAST config file.

Specifying your own BEAST config file is also useful if you wish to customize the model or priors of the analysis.
Note, the default template closely follows the setup in the `Ancestral State Reconstruction tutorial`_ by Remco Bouckaert,
which you can use as a guide for setting up your own custom BEAST analysis.
The `BEAST homepage`_ is also a useful resource if you're looking for help settings things up.

Some notes to keep in mind if you specify your own BEAST config:

1. If you choose to specify the deme/community information directly in the your BEAST file and not apply the CSV or regular
   expression data to set this, you must name your discrete trait `deme`, even if it's not deme, but something else, like
   species name or tissue type.
2. Note that the chain length and sampling interval settings in your beastfile will get overriden by whatever is specified
   here in this tool, and can not be assumed to remain as specified in your beastfile.
3. If you don't have tip dates, you can speed up your run by specifying a custom beast file where your fixed clock's rate isn't
   estimated but left constant. If you don't have any temporal data, these estimates won't mean anything anyway.
4. Main logfile must output to ``posterior.log`` and the trait trees to ``posterior.trait.trees`` [XXX].


Output files
------------

The following two outputs of an initial run are your two most valuable:

**BEAST logfile**: A standard BEAST logfile of sampled states and parameters, suitable use with Tracer.

**BEAST treefile**: A nexus file of trees from the posterior, with ancestral states labeled, suitable for
being run through PACT.

Once you've carried out a run, you must analyze the logfile to check for convergence.
For the moment, you will have to do this using Tracer (we're hoping to provide some statistics in tool soon, though XXX),
by downloading the treefile to your computer and loading it into Tracer.
You should see some values on the left hand of the screen in the table under the ESS (Effective Sample Size) column.
A good rule of thumb is that if any of these values are under 200, you should probably run BEAST for longer.


Resume runs
-----------

When you realize that you've spent a bunch of time running BEAST, only to find out that it hasn't run long enough,
you can pick up right where you left off using this tools Resume functionality.
You should note that in addition to the logfile and treefile from your last run, you should also have the following:

**BEAST config file**: A copy of the BEAST file created for the run.
This has been modified to include sequence, deme, and date information, as well as various other run settings.

**BEAST state file**: This is a file that BEAST maintains as it runs so if you wish to restart the process, you won't
be doing so from scratch.

In order to start a Resume run, start by entering the number of new samples you'd like to add to the data you've already collected.
Next, in the "BEAST file specification" input, select "Custom or Resume".
This will open up a file input from which you can select the BEAST config file form the previous run.
Next, select "Yes" in the "Resume from a previous run?" form input.
This will open up several new input fields.
Here you can specify the BEAST logfile, treefile and statefile from your previous run.

You can also specify a total number of samples you want to keep.
When running a Resume run, your log and tree files can grow large enough to bog down analysis tools.
This tool returns versions of the log and tree files which have been evenly trimmed down to the specified number of samples
to keep things manageable.
It's important to note, however, that if you do further Resume runs, you must make sure to specify the **untrimmed** log and
tree files for the following runs, or bad things will happen (someone will kill a puppy; seriously).
It's also important to note that Resume runs ignore all inputs I haven't explicitly mentioned here.
In particular, you can't change the sequences, the date information, deme specifications or sampling interval.
If you **do** want to change any of this, you will have to start a new run.


Downsampling
------------

Differences in sampling between demes you study can be a challenge when doing these analyses.
How do you know that one deme having been sampled more deeply isn't artificially biasing the results towards increased
diversity?
It's also frequently the case that researchers studying viruses don't submit every viral sequence they obtain, but go
through some procedure for deciding which "look the same enough" to consider a single species, from which only one is
submitted?
How do you know this wouldn't artificially biases your results towards increased diversity for this deme, since at the
same number of sequences, there would be an increased diversity coverage the ones with more coverage?

Issues of sampling depth and sampling bias frequently come up in the review process.
One way to deal with these issues is to show evidence that the sampling issues aren't significantly affecting the results,
or at the very least, to explore the effects of different sampling strategies on the results.
Argo Navis provides downsampling tools which help you towards this end.

There are two downsampling methods you can use: Random and K-means.
Random downsampling is meant to deal with issues of only sampling depth, while K-means downsampling is meant to
address issues of sampling bias.
While Radnom downsamling is likely fairly straight-forward, K-means downsampling may not be.

K-means downsampling starts by clustering sequences together into K clusters.
From each of these clusters a single sequence is chosen to represent the entire cluster.
This is done for each deme.
This method introduces intentional, but controlled sampling bias, as for any given number of K samples per
deme, the sequences chosen are going to reflect the *most* diversity possible among those seqeuences.
While this doesn't *solve* the problem of sampling bias, it does attempt to put all demes on equal footing, by
introducing similar diversity bias in all sequences.

A decent strategy for protecting yourself from reviewers is to use *both* of these methods at various K values,
and compare the results.
Assuming the results look similar in all cases, then great!
It would appear you have a very robust set of conclusions.
If there are differences, there will be a bit more work involved in explaining them, but at least you'll be able to say
you've thoroughly explored the issue.

On a final note, if you *do* decide to use BEAST's downsampling functionality, you will obtain a couple of additional
outputs for your convenience:

**Downsampled alignment**: The sequences kept in the the downsampling will be returned.
This may be useful for tracking which sequences were kept in the analysis, as well as serve as an input to other analyses
you may wish to perform with the downsampled data.

**Downsampled metadata**: If you supplied metadata for the analysis, you will also get this file.
Like the Downsampled alignment, it will contain all the metadata for the sequences kept in the downsampling step.


Random seeds
------------

Both the actual BEAST run and the downsampling methods support specification of random seeds.
Taking advantage of this aids in reproducibility of your analyses, as someone merely has to go in and specify the same seeds
to reproduce the results exactly.
If you choose not to specify your own random seeds, random seeds will be chosen for you and printed out in the logs, so that
if you wish to go back and reproduce something, you should be able to.


.. _Tracer: http://tree.bio.ed.ac.uk/software/tracer/
.. _Ancestral State Reconstruction tutorial: http://beast-classic.googlecode.com/files/ARv2.0.1.pdf
.. _BEAST homepage: http://beast-classic.googlecode.com/files/ARv2.0.1.pdf


Getting things into PACT
------------------------

Once you're done with this tool, you'll want to take your **trimmed BEAST treefile** and use that as input for your PACT run.
The PACT tool has it's own documentation, so you'll want to head over there for further instruction.
Sionara.


Citation
--------

Should cite the upcoming AstV paper and BEAST and Trevor's flu paper


  </help>
</tool>
